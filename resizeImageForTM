import cv2
import os
import logging

# Variables, change the variables if needed
TARGET_SIZE = 224 # Optimal voor Teachable Machine
INTERPOLATION = cv2.INTER_AREA # Optimal for reducing image size
SUPPORTED_FORMATS = (".jpg", ".jpeg", ".png")

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def resize_and_save_image(img_path, target_size=TARGET_SIZE, dest_path="", interpolation=INTERPOLATION):
    """
    Resizes an image to a specified target size while maintaining the aspect ratio.
    
    Parameters:
        img_path (str): Path to the input image.
        target_size (int): Target size for the longest dimension of the image.
        dest_path (str): Directory to save the resized image. If not specified, saves in a subdirectory.
        interpolation (int): Interpolation method for resizing.
    """
    if not os.path.isfile(img_path):
        logging.error(f"Error: Image file not found: {img_path}")
        return

    img = cv2.imread(img_path)
    if img is None:
        logging.error(f"Error: Could not load image from {img_path}. It might be corrupted or in an unsupported format.")
        return

    height, width, _ = img.shape
    longest_side = max(height, width)
    aspect_ratio = target_size / longest_side

    new_height = int(height * aspect_ratio)
    new_width = int(width * aspect_ratio)

    img_resized = cv2.resize(img, (new_width, new_height), interpolation=interpolation)

    base_name = os.path.splitext(os.path.basename(img_path))[0]
    ext = os.path.splitext(os.path.basename(img_path))[1]
    out_filename = f"{base_name}_{target_size}px{ext}"

    if not dest_path:
        dest_path = os.path.join(os.path.dirname(img_path), "_Resized_", str(target_size))
        os.makedirs(dest_path, exist_ok=True)

    out_path = os.path.join(dest_path, out_filename)
    cv2.imwrite(out_path, img_resized)
    logging.info(f"Image resized: {img_path} -> {out_path}")

if __name__ == "__main__":
    image_path = input("Please enter the path to the image directory: ")

    if not os.path.isdir(image_path):
        logging.error(f"Error: The path provided is not a valid directory: {image_path}")
    else:
        for filename in os.listdir(image_path):
            if filename.startswith("."):
                continue  # Skip hidden files

            img_path = os.path.join(image_path, filename)
            if os.path.isfile(img_path) and filename.lower().endswith(SUPPORTED_FORMATS):
                resize_and_save_image(img_path, TARGET_SIZE)
