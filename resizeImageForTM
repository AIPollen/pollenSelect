import cv2
import os
import logging
import numpy as np  # Required for creating the canvas

# Variables, change the variables if needed
TARGET_SIZE = 224  # Desired square size
INTERPOLATION = cv2.INTER_AREA  # Optimal for reducing image size
SUPPORTED_FORMATS = (".jpg", ".jpeg", ".png")

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


def resize_and_pad_image(img_path, target_size=TARGET_SIZE, dest_subdirectory="_Resized_Square_", interpolation=INTERPOLATION):
    """
    Resizes an image to fit within a square and adds padding to maintain aspect ratio using edge padding.

    Parameters:
        img_path (str): Path to the input image.
        target_size (int): Target size for the square image.
        dest_subdirectory (str): Subdirectory within the image directory to save the resized image. Defaults to "_Resized_Square_".
        interpolation (int): Interpolation method for resizing.
    """
    if not os.path.isfile(img_path):
        logging.error(f"Error: Image file not found: {img_path}")
        return

    # Load the image
    try:
        img = cv2.imread(img_path, cv2.IMREAD_UNCHANGED)
        if img is None:
            logging.error(f"Error: Could not load image from {img_path}. It might be corrupted or in an unsupported format.")
            return
    except Exception as e:
        logging.error(f"Error loading image: {img_path} - {e}")
        return

    height, width = img.shape[:2]

    # Calculate new dimensions to maintain aspect ratio
    if height > width:
        new_height = target_size
        new_width = int(target_size * (width / height))
    else:
        new_width = target_size
        new_height = int(target_size * (height / width))

    if new_width <= 0 or new_height <= 0:
        logging.error(f"Error: Calculated dimensions are invalid for resizing: {new_width}x{new_height}")
        return

    img_resized = cv2.resize(img, (new_width, new_height), interpolation=interpolation)

    # Create a new canvas with edge padding
    canvas = cv2.copyMakeBorder(
        img_resized,
        top=(target_size - new_height) // 2,
        bottom=(target_size - new_height + 1) // 2,
        left=(target_size - new_width) // 2,
        right=(target_size - new_width + 1) // 2,
        borderType=cv2.BORDER_REPLICATE
    )

    base_name = os.path.splitext(os.path.basename(img_path))[0]
    ext = os.path.splitext(os.path.basename(img_path))[1]
    out_filename = f"{base_name}_{target_size}px{ext}"

    # Construct the output path within the image directory
    dest_path = os.path.join(os.path.dirname(img_path), dest_subdirectory, str(target_size))

    # Create the directory if it doesn't exist (using os.makedirs with exist_ok=True)
    os.makedirs(dest_path, exist_ok=True)

    out_path = os.path.join(dest_path, out_filename)
    cv2.imwrite(out_path, canvas)
    logging.info(f"Image resized and padded: {img_path} -> {out_path}")


if __name__ == "__main__":
    image_directory = input("Please enter the path to the image directory: ")

    if not os.path.isdir(image_directory):
        logging.error(f"Error: The path provided is not a valid directory: {image_directory}")
    else:
        for filename in os.listdir(image_directory):
            if filename.lower().endswith(SUPPORTED_FORMATS):
                img_path = os.path.join(image_directory, filename)
                resize_and_pad_image(img_path)
            else:
                logging.warning(f"Unsupported file format skipped: {filename}")
